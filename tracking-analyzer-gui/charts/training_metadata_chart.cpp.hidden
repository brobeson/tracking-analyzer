// void make_training_series(QChart& chart,
//                           const score_list& scores,
//                           const QString& name,
//                           const qreal point_size,
//                           const bool isVisible)
// {
//   auto* const series {new QtCharts::QScatterSeries};
//   series->append(scores);
//   series->setName(name);
//   // NOLINTNEXTLINE(cppcoreguidelines-avoid-magic-numbers)
//   series->setMarkerSize(point_size);
//   series->setPen(QPen {});
//   series->setVisible(isVisible);
//   chart.addSeries(series);
// }

// void add_decision_boundary(QChart& chart, const range graph_bounds)
// {
//   auto* const line {new QLineSeries};
//   line->append(graph_bounds.first, graph_bounds.first);
//   line->append(graph_bounds.second, graph_bounds.second);
//   line->setName("Decision Boundary");
//   chart.addSeries(line);
// }

// auto find_data_series(const QChart& chart, const QString& name)
//   -> QAbstractSeries*
// {
//   const auto all_series {chart.series()};
//   const auto iterator {
//     std::find_if(std::begin(all_series),
//                  std::end(all_series),
//                  [&name](const QAbstractSeries* const series) {
//                    return series->name() == name;
//                  })};
//   if (iterator == std::end(all_series))
//   {
//     return nullptr;
//   }
//   return *iterator;
// }

// void add_score_thresholds(QChart& chart,
//                           const range graph_bounds,
//                           const float background_threshold,
//                           const float target_threshold,
//                           const bool isVisible)
// {
//   const auto color {
//     dynamic_cast<QScatterSeries*>(
//       find_data_series(chart, "Background Training Candidates"))
//       ->color()};
//   auto* line {new QLineSeries};
//   line->append(background_threshold, graph_bounds.first);
//   line->append(background_threshold, graph_bounds.second);
//   line->setName("Cluster Thresholds");
//   line->setColor(color);
//   line->setVisible(isVisible);
//   chart.addSeries(line);
//   line = new QLineSeries;
//   line->append(graph_bounds.first, target_threshold);
//   line->append(graph_bounds.second, target_threshold);
//   // Add a name so the code can search for it later.
//   line->setName("Cluster Thresholds Hidden");
//   line->setColor(color);
//   line->setVisible(isVisible);
//   chart.addSeries(line);
//   chart.legend()->markers().back()->setVisible(false);
// }

// void toggle_series(const Ui::main_window& ui,
//                    const QString& series_name,
//                    const bool series_visible)
// {
//   auto* const series {find_data_series(*ui.graph->chart(), series_name)};
//   if (series != nullptr)
//   {
//     series->setVisible(series_visible);
//   }
// }

// void reset_spinbox(QSpinBox& spinbox, const int maximum)
// {
//   spinbox.setEnabled(true);
//   spinbox.setMaximum(maximum);
//   spinbox.setValue(1);
//   spinbox.setSuffix(" of " + QString::number(maximum));
// }

// auto create_plots_menu(QAction* const bg_candidate_action,
//                        QAction* const bg_mined_action,
//                        QAction* const tg_candidate_action,
//                        QAction* const thresholds_action)
// {
//   auto* const menu {new QMenu};
//   menu->addAction(bg_candidate_action);
//   bg_candidate_action->setChecked(true);
//   menu->addAction(bg_mined_action);
//   bg_mined_action->setChecked(true);
//   menu->addAction(tg_candidate_action);
//   tg_candidate_action->setChecked(false);
//   menu->addAction(thresholds_action);
//   thresholds_action->setChecked(false);
//   return menu;
// }

// void set_graph_title(QChart& chart,
//                      const QString& sequence_name,
//                      const int update_number,
//                      const int batch_number)
// {
//   chart.setTitle("Training Data - " + sequence_name + " - Update "
//                  + QString::number(update_number) + " - Batch "
//                  + QString::number(batch_number));
// }

main_window::main_window(QWidget* parent):
  QMainWindow(parent), ui(new Ui::main_window)
{
  ui->plots_menu->setMenu(create_plots_menu(ui->bg_candidates_action,
                                            ui->bg_mined_action,
                                            ui->tg_candidates_action,
                                            ui->thresholds_action));
}

// void main_window::set_training_score_data(const training_batch& batch)
// {
//   ui->graph->chart()->removeAllSeries();
//   auto& chart {*ui->graph->chart()};
//   auto& legend {*chart.legend()};
//   legend.setAlignment(Qt::AlignRight);
//   const auto range {get_chart_range(batch)};
//   add_decision_boundary(chart, range);
//   const auto point_size {ui->point_size_spinbox->value()};
//   make_training_series(chart,
//                        batch.background_candidates,
//                        "Background Training Candidates",
//                        point_size,
//                        ui->bg_candidates_action->isChecked());
//   make_training_series(chart,
//                        batch.background_mined,
//                        "Background Mined",
//                        point_size,
//                        ui->bg_mined_action->isChecked());
//   make_training_series(chart,
//                        batch.target_candidates,
//                        "Target Training Candidates",
//                        point_size,
//                        ui->tg_candidates_action->isChecked());
//   add_score_thresholds(chart,
//                        range,
//                        batch.background_threshold,
//                        batch.target_threshold,
//                        ui->thresholds_action->isChecked());
//   ui->graph->chart()->createDefaultAxes();
//   auto* axis {ui->graph->chart()->axes(Qt::Orientation::Horizontal)[0]};
//   axis->setTitleText("Background Scores");
//   axis->setRange(range.first, range.second);
//   axis = ui->graph->chart()->axes(Qt::Orientation::Vertical)[0];
//   axis->setTitleText("Target Scores");
//   axis->setRange(range.first, range.second);
// }

// void main_window::change_update(const int update_number)
// {
//   const auto update_index {
//     gsl::narrow<update_list::size_type>(update_number - 1)};
//   const auto frame {m_training_data.update_frames.at(update_index)};
//   change_frame(frame);
//   m_current_training.current_update = update_index;
//   reset_spinbox(
//     *ui->batch_spinbox,
//     gsl::narrow<int>(m_training_data.updates[update_index].size()));
//   change_training_batch(1);
// }

// void main_window::load_tracking_data()
// {
//   const auto filepath {
//     get_tracking_data_filepath(this, application::settings())};
//   if (filepath.isEmpty())
//   {
//     return;
//   }
//   // if (filepath.endsWith(".json"))
//   // {
//   //   load_training_data(filepath);
//   // }
//   // else if (filepath.endsWith(".txt"))
//   // {
//   //   load_tracking_results(filepath);
//   // }
// }

// void main_window::change_point_size(const int size) const
// {
//   for (auto* const series : ui->graph->chart()->series())
//   {
//     if (series->type() == QAbstractSeries::SeriesType::SeriesTypeScatter)
//     {
//       dynamic_cast<QScatterSeries*>(series)->setMarkerSize(size);
//     }
//   }
// }

// void main_window::toggle_bg_candidate_plot(const bool checked) const
// {
//   toggle_series(*ui, "Background Training Candidates", checked);
// }

// void main_window::toggle_bg_mined_plot(const bool checked) const
// {
//   toggle_series(*ui, "Background Mined", checked);
// }

// void main_window::toggle_tg_candidate_plot(const bool checked) const
// {
//   toggle_series(*ui, "Target Training Candidates", checked);
// }

// void main_window::toggle_thresholds_plot(const bool checked) const
// {
//   toggle_series(*ui, "Cluster Thresholds", checked);
//   toggle_series(*ui, "Cluster Thresholds Hidden", checked);
// }

// void main_window::save_graph()
// {
//   const auto suggestion {QDir::homePath() + "/"
//                          + m_training_data.sequence_name
//                          + "_frame1_update1_scores.png"};
//   const auto filepath {QFileDialog::getSaveFileName(
//     this, "Save Plot", suggestion, "PNG (*.png)")};
//   if (!filepath.isEmpty())
//   {
//     const auto image {ui->graph->grab()};
//     image.save(filepath, "PNG");
//   }
// }

// void main_window::change_training_batch(const int batch_number)
// {
//   m_current_training.current_batch
//     = gsl::narrow<training_update::size_type>(batch_number - 1);
//   set_training_score_data(
//     m_training_data.updates.at(m_current_training.current_update)
//       .at(m_current_training.current_batch));
//   set_graph_title(*ui->graph->chart(),
//                   m_training_data.sequence_name,
//                   ui->update_spinbox->value(),
//                   batch_number);
// }

// void main_window::load_training_data(const QString& filepath)
// {
//   m_training_data = analyzer::load_training_scores(filepath);
//   ui->sequence_combobox->setCurrentText(m_training_data.sequence_name);
//   reset_spinbox(*ui->update_spinbox,
//                 gsl::narrow_cast<int>(m_training_data.update_frames.size()));
//   change_update(1);
//   ui->point_size_spinbox->setEnabled(true);
//   ui->save_graph_button->setEnabled(true);
//   ui->plots_menu->setEnabled(true);
//   application::settings().setValue(settings_keys::last_loaded_tracking_data,
//                                    filepath);
//   setWindowTitle(basename(filepath));
// }

// void main_window::load_tracking_results(const QString& filepath)
// {
//   m_tracking_results =
//   analyzer::load_tracking_results_for_sequence(filepath);
// }
